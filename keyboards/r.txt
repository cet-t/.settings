Shader "OutlineShaderTransparent"
{
    Properties
    {
        _OutlineColor ("Outline Color", Color) = (1,1,1,1) // アウトラインの色
        _OutlineThickness ("Outline Thickness", Range(0.001, 0.01)) = 0.005 // アウトラインの太さ
        _MainTex ("Main Texture", 2D) = "white" {} // オブジェクトのテクスチャ
        _BaseColor ("Base Color", Color) = (1,1,1,0.5) // オブジェクト本体の色と透明度
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent"} // 透明オブジェクトとしてレンダリング
        LOD 100
        Blend SrcAlpha OneMinusSrcAlpha // アルファブレンドを有効にする

        // 1回目のパス：オブジェクト本体の描画
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : TEXCOORD1;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;
            fixed4 _BaseColor;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.normal = UnityObjectToWorldNormal(v.normal);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 col = tex2D(_MainTex, i.uv) * _BaseColor; // テクスチャとベースカラーを乗算
                return col;
            }
            ENDCG
        }

        // 2回目のパス：アウトラインの描画
        Pass
        {
            Tags { "LightMode"="ShadowCaster" } // 影を落とさないようにする
            Cull Back // 背面をカリング

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
            };

            float _OutlineThickness;
            float4 _OutlineColor;

            v2f vert (appdata v)
            {
                v2f o;
                // 頂点を法線方向に少しだけ押し出すことでアウトラインを生成
                float3 normal = UnityObjectToWorldNormal(v.normal);
                float4 vertex = v.vertex + float4(normal, 0) * _OutlineThickness;
                o.vertex = UnityObjectToClipPos(vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                return _OutlineColor;
            }
            ENDCG
        }
    }
}